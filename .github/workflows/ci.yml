name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint black isort mypy
        pip install -r requirements.txt
    
    - name: Run Black (Code Formatting)
      run: |
        black --check .
      continue-on-error: true
    
    - name: Run isort (Import Sorting)
      run: |
        isort --check-only .
      continue-on-error: true
    
    - name: Run Pylint
      run: |
        pylint **/*.py --exit-zero
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit (Security Linter)
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety (Dependency Check)
      run: |
        safety check --json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json

  test:
    runs-on: ubuntu-latest
    name: Unit Tests
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=./ --cov-report=xml --cov-report=html
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: htmlcov/

  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build Test
    needs: [test, lint-and-format, security-scan]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t ai-ide:test .
    
    - name: Test Docker image
      run: |
        docker run --rm ai-ide:test python --version

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python test.py
      continue-on-error: true

  notify:
    runs-on: ubuntu-latest
    name: Notification
    needs: [test, lint-and-format, security-scan, docker-build]
    if: always()
    
    steps:
    - name: Check status
      run: |
        echo "Build completed with status: ${{ job.status }}"
